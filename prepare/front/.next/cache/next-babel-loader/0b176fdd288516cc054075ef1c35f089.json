{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST } from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('/api.login', data);\n}\n\nfunction* login(action) {\n  try {\n    //const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      error: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api.logOut');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS //data: action.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api.signUp');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS //data: action.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login); //로그인이 실행될때까지 기다리겠다는 뜻\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, followUp);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollowUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp), fork(watchUnfollow), fork(watchFollow)]);\n}","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","LOG_IN_SUCCESS","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","loginAPI","data","post","login","action","type","error","err","response","logOutAPI","logOut","signUpAPI","signUp","watchLogin","watchLogOut","watchSignUp","watchFollow","followUp","watchUnfollow","UNFOLLOW_REQUEST","unfollowUp","userSaga"],"mappings":"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","sourcesContent":["import { all,fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\nimport { LOG_IN_SUCCESS, LOG_IN_REQUEST, LOG_IN_FAILURE,\r\n         LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n         SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST}\r\nfrom '../reducers/user'\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('/api.login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    try{\r\n        //const result = yield call(loginAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            error: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api.logOut');\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n            //data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.post('/api.signUp');\r\n}\r\n\r\nfunction* signUp() {\r\n    try{\r\n        // const result = yield call(signUpAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n            //data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, login); //로그인이 실행될때까지 기다리겠다는 뜻\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST,logOut);\r\n}\r\nfunction* watchSignUp () {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, followUp)\r\n}\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollowUp)\r\n}\r\n    \r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n        fork(watchUnfollow),\r\n        fork(watchFollow),\r\n\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}