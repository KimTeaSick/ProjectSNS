{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport shortid from \"shortid\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api.addPost', data);\n}\n\nfunction addPost(action) {\n  var _id;\n\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _id = shortid.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              content: action.data,\n              id: _id\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: _id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api.removePost', data);\n}\n\nfunction removePost(action) {\n  var _id2;\n\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _id2 = shortid.generate();\n          _context2.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(id, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/sagas/post.js"],"names":["addPost","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","fork","put","takeLatest","delay","axios","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","action","id","generate","type","content","error","response","removePostAPI","REMOVE_POST_OF_ME","addCommentAPI"],"mappings":";;oDAcUA,O;qDA4BAC,U;qDAyBAC,U;qDAgBAC,Y;qDAGAC,e;qDAGAC,e;qDAIeC,Q;;AA7FzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,0BAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACSC,mBADT,EAC8BC,mBAD9B,EACmDC,mBADnD,EAESC,mBAFT,EAE8BC,mBAF9B,EAEmDC,mBAFnD,QAGK,kBAHL;AAIA,SAASC,cAAT,QAA+B,kBAA/B;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOb,KAAK,CAACc,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACH;;AAED,SAAUzB,OAAV,CAAkB2B,MAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMhB,KAAK,CAAC,IAAD,CAAX;;AAHR;AAIciB,UAAAA,GAJd,GAImBf,OAAO,CAACgB,QAAR,EAJnB;AAAA;AAKQ,iBAAMpB,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAEf,gBADA;AAENU,YAAAA,IAAI,EAAE;AACNM,cAAAA,OAAO,EAAEJ,MAAM,CAACF,IADV;AAENG,cAAAA,EAAE,EAAFA;AAFM;AAFA,WAAD,CAAT;;AALR;AAAA;AAYQ,iBAAMnB,GAAG,CAAE;AACPqB,YAAAA,IAAI,EAAEP,cADC;AAEPE,YAAAA,IAAI,EAAEG;AAFC,WAAF,CAAT;;AAZR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiBQ,iBAAMnB,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAEd,gBADA;AAENgB,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAjBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA,SAASS,aAAT,CAAuBT,IAAvB,EAA6B;AACzB,SAAOb,KAAK,UAAL,CAAa,iBAAb,EAAgCa,IAAhC,CAAP;AACH;;AAED,SAAUxB,UAAV,CAAqB0B,MAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMhB,KAAK,CAAC,IAAD,CAAX;;AAHR;AAIciB,UAAAA,IAJd,GAImBf,OAAO,CAACgB,QAAR,EAJnB;AAAA;AAKQ,iBAAMpB,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAET,mBADA;AAENI,YAAAA,IAAI,EAAGE,MAAM,CAACF;AAFR,WAAD,CAAT;;AALR;AAAA;AASQ,iBAAMhB,GAAG,CAAE;AACPqB,YAAAA,IAAI,EAAEK,iBADC;AAEPV,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFN,WAAF,CAAT;;AATR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcQ,iBAAMhB,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAER,mBADA;AAENU,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,SAASW,aAAT,CAAuBX,IAAvB,EAA6B;AACzB,SAAOb,KAAK,CAACc,IAAN,qBAAwBE,EAAxB,eAAsCH,IAAtC,CAAP;AACH;;AAED,SAAUvB,UAAV,CAAqByB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMhB,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMF,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAEZ,mBADA;AAENO,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMhB,GAAG,CAAC;AACNqB,YAAAA,IAAI,EAAEX,mBADA;AAENa,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUtB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACI,gBAAD,EAAkBd,OAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUI,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACU,mBAAD,EAAqBnB,UAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUI,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACO,mBAAD,EAAqBf,UAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,YAAD,CADE,EAENK,IAAI,CAACJ,eAAD,CAFE,EAGNI,IAAI,CAACH,eAAD,CAHE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\nimport shortid from \"shortid\";\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n         ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n        ,REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE}\r\nfrom '../reducers/post';\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api.addPost', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n            content: action.data,\r\n            id,\r\n            },\r\n        });\r\n        yield put ({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api.removePost', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try{\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data : action.data,\r\n        });\r\n        yield put ({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${id}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try{\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}