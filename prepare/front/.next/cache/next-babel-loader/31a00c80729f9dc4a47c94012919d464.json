{"ast":null,"code":"import { all, fork, put, takeLatest, delay, throttle, call } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api.loadPost', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api.removePost', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","content","addPost","action","result","type","id","err","error","response","loadPostsAPI","get","loadPosts","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","watchLoadPosts","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,EAA4CC,QAA5C,EAAsDC,IAAtD,QAAkE,0BAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACSC,mBADT,EAC8BC,mBAD9B,EACmDC,mBADnD,EAESC,mBAFT,EAE8BC,mBAF9B,EAEmDC,mBAFnD,EAGSC,kBAHT,EAG6BC,kBAH7B,EAGiDC,kBAHjD,EAGqEC,iBAHrE,QAKK,kBALL;AAMA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOjB,KAAK,CAACkB,IAAN,CAAW,OAAX,EAAqB;AAACC,IAAAA,OAAO,EAACF;AAAT,GAArB,CAAP;AACH;;AAED,UAAUG,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMvB,IAAI,CAACiB,UAAD,EAAaK,MAAM,CAACJ,IAApB,CAAzB;AACA,UAAMtB,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAErB,gBADA;AAENe,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIA,UAAMtB,GAAG,CAAE;AACP4B,MAAAA,IAAI,EAAET,cADC;AAEPG,MAAAA,IAAI,EAAEK,MAAM,CAACL,IAAP,CAAYO;AAFX,KAAF,CAAT;AAIH,GAVD,CAUC,OAAOC,GAAP,EAAW;AACR,UAAM9B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEpB,gBADA;AAENuB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,YAAT,CAAsBX,IAAtB,EAA4B;AACxB,SAAOjB,KAAK,CAAC6B,GAAN,CAAU,eAAV,EAA2BZ,IAA3B,CAAP;AACH;;AAED,UAAUa,SAAV,CAAoBT,MAApB,EAA4B;AACxB,MAAG;AACC;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEZ,kBADA;AAENM,MAAAA,IAAI,EAAEJ,iBAAiB,CAAC,EAAD;AAFjB,KAAD,CAAT;AAIH,GAPD,CAOC,OAAOY,GAAP,EAAW;AACR,UAAM9B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEX,kBADA;AAENc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASc,aAAT,CAAuBd,IAAvB,EAA6B;AACzB,SAAOjB,KAAK,CAACgC,MAAN,CAAa,iBAAb,EAAgCf,IAAhC,CAAP;AACH;;AAED,UAAUgB,UAAV,CAAqBZ,MAArB,EAA6B;AACzB,MAAG;AACC;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEf,mBADA;AAENS,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIA,UAAMtB,GAAG,CAAE;AACP4B,MAAAA,IAAI,EAAER,iBADC;AAEPE,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFN,KAAF,CAAT;AAIH,GAXD,CAWC,OAAOQ,GAAP,EAAW;AACR,UAAM9B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEd,mBADA;AAENiB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASiB,aAAT,CAAuBjB,IAAvB,EAA6B;AACzB,SAAOjB,KAAK,CAACkB,IAAN,CAAY,SAAQD,IAAI,CAACkB,MAAO,UAAhC,EAA2ClB,IAA3C,CAAP;AACH;;AAED,UAAUmB,UAAV,CAAqBf,MAArB,EAA6B;AACzB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMvB,IAAI,CAACmC,aAAD,EAAgBb,MAAM,CAACJ,IAAvB,CAAzB;AACA,UAAMtB,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAElB,mBADA;AAENY,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIH,GAND,CAMC,OAAOQ,GAAP,EAAW;AACR,UAAM9B,GAAG,CAAC;AACN4B,MAAAA,IAAI,EAAEjB,mBADA;AAENoB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUoB,YAAV,GAAyB;AACrB,QAAMzC,UAAU,CAACK,gBAAD,EAAkBmB,OAAlB,CAAhB;AACH;;AACD,UAAUkB,eAAV,GAA4B;AACxB,QAAM1C,UAAU,CAACW,mBAAD,EAAqB0B,UAArB,CAAhB;AACH;;AACD,UAAUM,eAAV,GAA4B;AACxB,QAAM3C,UAAU,CAACQ,mBAAD,EAAqBgC,UAArB,CAAhB;AACH;;AACD,UAAUI,cAAV,GAA2B;AACvB,QAAM1C,QAAQ,CAAC,IAAD,EAAOY,kBAAP,EAA0BoB,SAA1B,CAAd;AACH;;AAED,eAAe,UAAUW,QAAV,GAAqB;AAChC,QAAMhD,GAAG,CAAC,CACNC,IAAI,CAAC2C,YAAD,CADE,EAEN3C,IAAI,CAAC4C,eAAD,CAFE,EAGN5C,IAAI,CAAC6C,eAAD,CAHE,EAIN7C,IAAI,CAAC8C,cAAD,CAJE,CAAD,CAAT;AAMH","sourcesContent":["import { all, fork, put, takeLatest, delay, throttle, call } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n         ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n        ,REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE\r\n        ,LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost\r\n         }\r\nfrom '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post',  {content:data} );\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put ({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api.loadPost', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try{\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        })\r\n    }catch (err){\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api.removePost', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try{\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data : action.data,\r\n        });\r\n        yield put ({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST,loadPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadPosts),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}