{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\n\nfunction loginAPI(data) {\n  return axios.post('/api.login', data);\n}\n\nfunction* login(action) {\n  try {\n    //const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api.logOut');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS' //data: action.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', login); //로그인이 실행될때까지 기다리겠다는 뜻\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","loginAPI","data","axios","post","login","action","type","err","response","logOutAPI","logOut","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,EAAoCC,KAApC,QAAiD,0BAAjD;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOC,OAAOM,GAAP,EAAW;AACR,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASQ,SAAT,GAAqB;AACjB,SAAOP,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMX,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOC,OAAOC,GAAP,EAAW;AACR,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUU,UAAV,GAAuB;AACnB,QAAMb,UAAU,CAAC,gBAAD,EAAmBM,KAAnB,CAAhB,CADmB,CACwB;AAC9C;;AAED,UAAUQ,WAAV,GAAwB;AACpB,QAAMd,UAAU,CAAC,iBAAD,EAAmBY,MAAnB,CAAhB;AACH;;AAGD,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMlB,GAAG,CAAC,CACNC,IAAI,CAACe,UAAD,CADE,EAENf,IAAI,CAACgB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all,fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('/api.login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    try{\r\n        //const result = yield call(loginAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api.logOut');\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            //data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest('LOG_IN_REQUEST', login); //로그인이 실행될때까지 기다리겠다는 뜻\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST',logOut);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}