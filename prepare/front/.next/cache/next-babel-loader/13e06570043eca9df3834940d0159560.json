{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker, { fake } from 'faker';\nexport const initalState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '젤초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"젤초\"\n  }\n});\n\nconst reducer = (state = initalState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsDone = true;\n        draft.loadPostsLoading = false;\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsError = action.error;\n        draft.loadPostsLoading = true;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostDone = true;\n        draft.addPostLoading = false;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostError = action.error;\n        draft.addPostLoading = true;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostDone = true;\n        draft.removePostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostError = action.error;\n        draft.removePostLoading = false;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentDone = true;\n          draft.addCommentLoading = false;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // post.Comments= [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return{\n          //     ...state,\n          //     mainPosts,\n          //     addCommentDone: true,\n          //     addCommentLoading:false,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentError = action.error;\n        draft.addCommentLoading = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","fake","initalState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","v","i","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker, { fake } from 'faker';\r\n\r\nexport const initalState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError:null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError:null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError:null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError:null,\r\n}\r\n\r\nexport const generateDummyPost = (number) => \r\n    Array(number).fill().map((v, i) => ({\r\n        id: shortId.generate(),\r\n        User : {\r\n            id:shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        Images: [{\r\n            src: faker.image.image(),\r\n        }],\r\n        Comments: [{\r\n            User : {\r\n                id:shortId.generate(),\r\n                nickname: faker.name.findName()\r\n            },\r\n            content: faker.lorem.sentence(),\r\n        }],\r\n    }));\r\n\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '젤초',\r\n    },\r\n    Images: [],\r\n    Comments:[],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id:shortId.generate(),\r\n    content: data,\r\n    User:{\r\n        id:1,\r\n        nickname: \"젤초\"\r\n    }\r\n});\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOAD_POSTS_REQUEST:\r\n                    draft.loadPostsLoading = true;\r\n                    draft.loadPostsDone = false;\r\n                    draft.loadPostsError = null;\r\n                    break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                    draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                    draft.loadPostsDone = true;\r\n                    draft.loadPostsLoading = false;\r\n                    draft.hasMorePosts = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                    draft.loadPostsError = action.error;\r\n                    draft.loadPostsLoading = true;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                    draft.addPostLoading = true;\r\n                    draft.addPostDone = false;\r\n                    draft.addPostError = null;\r\n                    break;\r\n            case ADD_POST_SUCCESS:\r\n                    draft.mainPosts.unshift(dummyPost(action.data));\r\n                    draft.addPostDone = true;\r\n                    draft.addPostLoading = false;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                    draft.addPostError = action.error;\r\n                    draft.addPostLoading = true;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                    draft.removePostLoading = true;\r\n                    draft.removePostDone=false;\r\n                    draft.removePostError=null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                    draft.removePostDone = true;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                    draft.removePostError = action.error;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                    draft.addCommentLoading = true;\r\n                    draft.addCommentDone = false;\r\n                    draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((v)=> v.id === action.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentDone = true;\r\n                draft.addCommentLoading = false;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // post.Comments= [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return{\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentDone: true,\r\n                //     addCommentLoading:false,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                    draft.addCommentError = action.error;\r\n                    draft.addCommentLoading = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}