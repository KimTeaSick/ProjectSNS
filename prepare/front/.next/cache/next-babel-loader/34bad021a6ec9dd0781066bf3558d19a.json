{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(likePosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, delay, throttle, call } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context6.next = 14;\n          break;\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePosts);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLoadPosts), fork(watchLikePost), fork(watchUnlikePost), fork(watchUploadImages)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/sagas/post.js"],"names":["addPost","uploadImages","loadPosts","likePosts","unlikePosts","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","watchLoadPosts","watchLikePost","watchUnlikePost","watchUploadImages","postSaga","all","fork","put","takeLatest","delay","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","content","action","result","type","id","console","error","response","uploadImagesAPI","loadPostsAPI","get","likePostAPI","patch","unlikePostAPI","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay, throttle, call } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n         ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n        ,REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE\r\n        ,LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE\r\n        ,LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE\r\n        ,UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE\r\n        ,UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE\r\n        ,\r\n         }\r\nfrom '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post',  {content:data} );\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put ({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images',data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try{\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,   \r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/posts',data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try{\r\n        const result = yield call(loadPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,   \r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePosts(action) {\r\n    try{\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,   \r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePosts(action) {\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,   \r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try{\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put ({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST,loadPosts);\r\n}\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST,likePosts);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST,unlikePosts);\r\n}\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST,uploadImages);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadPosts),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchUploadImages),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}