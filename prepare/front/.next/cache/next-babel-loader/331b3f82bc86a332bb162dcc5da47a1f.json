{"ast":null,"code":"import produce from 'immer';\nexport const initalState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initalState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesDone = true;\n          draft.uploadImagesLoading = false;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesError = action.error;\n        draft.uploadImagesLoading = false;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostDone = true;\n          draft.likePostLoading = false;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostError = action.error;\n        draft.likePostLoading = false;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.PostId);\n          draft.unlikePostDone = true;\n          draft.unlikePostLoading = false;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostError = action.error;\n        draft.unlikePostLoading = false;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsDone = true;\n        draft.loadPostsLoading = false;\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsError = action.error;\n        draft.loadPostsLoading = false;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostDone = true;\n        draft.addPostLoading = false;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostError = action.error;\n        draft.addPostLoading = true;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.postId);\n        draft.removePostDone = true;\n        draft.removePostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostError = action.error;\n        draft.removePostLoading = false;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.postId);\n          post.Comments.unshift(action.data.content);\n          draft.addCommentDone = true;\n          draft.addCommentLoading = false;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // post.Comments= [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return{\n          //     ...state,\n          //     mainPosts,\n          //     addCommentDone: true,\n          //     addCommentLoading:false,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentError = action.error;\n        draft.addCommentLoading = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/reducers/post.js"],"names":["produce","initalState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","error","post","find","v","id","PostId","Likers","push","UserId","filter","concat","length","unshift","postId","Comments","content"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\n\r\nexport const initalState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError:null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError:null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError:null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError:null,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError:null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError:null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError:null,\r\n}\r\n\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\n\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case UPLOAD_IMAGES_REQUEST:\r\n                    draft.uploadImagesLoading = true;\r\n                    draft.uploadImagesDone = false;\r\n                    draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                    draft.imagePaths = action.data;\r\n                    draft.uploadImagesDone = true;\r\n                    draft.uploadImagesLoading = false;\r\n                break;}\r\n            case UPLOAD_IMAGES_FAILURE:\r\n                    draft.uploadImagesError = action.error;\r\n                    draft.uploadImagesLoading = false;\r\n                break;\r\n            case LIKE_POST_REQUEST:\r\n                    draft.likePostLoading = true;\r\n                    draft.likePostDone = false;\r\n                    draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS: {\r\n                    const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                    post.Likers.push({ id: action.data.UserId });\r\n                    draft.likePostDone = true;\r\n                    draft.likePostLoading = false;\r\n                break;}\r\n            case LIKE_POST_FAILURE:\r\n                    draft.likePostError = action.error;\r\n                    draft.likePostLoading = false;\r\n                break;\r\n            case UNLIKE_POST_REQUEST:\r\n                    draft.unlikePostLoading = true;\r\n                    draft.unlikePostDone = false;\r\n                    draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS: {\r\n                    const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                    post.Likers = post.Likers.filter((v) => v.id !== action.data.PostId);\r\n                    draft.unlikePostDone = true;\r\n                    draft.unlikePostLoading = false;\r\n                break; }\r\n            case UNLIKE_POST_FAILURE:\r\n                    draft.unlikePostError = action.error;\r\n                    draft.unlikePostLoading = false;\r\n                break;\r\n            case LOAD_POSTS_REQUEST:\r\n                    draft.loadPostsLoading = true;\r\n                    draft.loadPostsDone = false;\r\n                    draft.loadPostsError = null;\r\n                    break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                    draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                    draft.loadPostsDone = true;\r\n                    draft.loadPostsLoading = false;\r\n                    draft.hasMorePosts = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                    draft.loadPostsError = action.error;\r\n                    draft.loadPostsLoading = false;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                    draft.addPostLoading = true;\r\n                    draft.addPostDone = false;\r\n                    draft.addPostError = null;\r\n                    break;\r\n            case ADD_POST_SUCCESS:\r\n                    draft.mainPosts.unshift(action.data);\r\n                    draft.addPostDone = true;\r\n                    draft.addPostLoading = false;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                    draft.addPostError = action.error;\r\n                    draft.addPostLoading = true;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                    draft.removePostLoading = true;\r\n                    draft.removePostDone=false;\r\n                    draft.removePostError=null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.postId);\r\n                    draft.removePostDone = true;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                    draft.removePostError = action.error;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                    draft.addCommentLoading = true;\r\n                    draft.addCommentDone = false;\r\n                    draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((v)=> v.id === action.postId);\r\n                post.Comments.unshift(action.data.content);\r\n                draft.addCommentDone = true;\r\n                draft.addCommentLoading = false;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // post.Comments= [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return{\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentDone: true,\r\n                //     addCommentLoading:false,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                    draft.addCommentError = action.error;\r\n                    draft.addCommentLoading = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}