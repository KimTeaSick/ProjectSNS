{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api.login', data);\n}\n\nfunction* login(action) {\n  try {\n    //const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      error: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api.logOut');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS //data: action.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login); //로그인이 실행될때까지 기다리겠다는 뜻\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","loginAPI","data","post","login","action","type","error","err","response","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogin","LOG_IN_REQUEST","watchLogOut","LOG_OUT_REQUEST","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,EAAoCC,KAApC,QAAiD,0BAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,KAAK,EAAEF,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GAPD,CAOC,OAAOM,GAAP,EAAW;AACR,UAAMX,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,KAAK,EAAEC,GAAG,CAACC,QAAJ,CAAaP;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASQ,SAAT,GAAqB;AACjB,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAEM,eADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOC,OAAOJ,GAAP,EAAW;AACR,UAAMX,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAEO,eADA;AAENN,MAAAA,KAAK,EAAEC,GAAG,CAACC,QAAJ,CAAaP;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUY,UAAV,GAAuB;AACnB,QAAMhB,UAAU,CAACiB,cAAD,EAAiBX,KAAjB,CAAhB,CADmB,CACsB;AAC5C;;AAED,UAAUY,WAAV,GAAwB;AACpB,QAAMlB,UAAU,CAACmB,eAAD,EAAiBN,MAAjB,CAAhB;AACH;;AAGD,eAAe,UAAUO,QAAV,GAAqB;AAChC,QAAMvB,GAAG,CAAC,CACNC,IAAI,CAACkB,UAAD,CADE,EAENlB,IAAI,CAACoB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all,fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('/api.login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    try{\r\n        //const result = yield call(loginAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            error: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api.logOut');\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n            //data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, login); //로그인이 실행될때까지 기다리겠다는 뜻\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST,logOut);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}