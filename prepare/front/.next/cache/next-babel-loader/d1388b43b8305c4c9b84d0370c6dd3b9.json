{"ast":null,"code":"import { all, fork, put, takeLatest, delay, throttle, call } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePosts(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePosts(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api.removePost', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePosts);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLoadPosts), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","content","addPost","action","result","type","id","err","console","error","response","loadPostsAPI","get","loadPosts","likePostAPI","patch","likePosts","unlikePostAPI","delete","unlikePosts","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","watchLoadPosts","watchLikePost","watchUnlikePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay, throttle, call } from \"@redux-saga/core/effects\";\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n         ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE\r\n        ,REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE\r\n        ,LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE\r\n        ,LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE\r\n        ,UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE\r\n         }\r\nfrom '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post',  {content:data} );\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put ({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/posts',data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try{\r\n        const result = yield call(loadPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,   \r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePosts(action) {\r\n    try{\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,   \r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePosts(action) {\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,   \r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api.removePost', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try{\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data : action.data,\r\n        });\r\n        yield put ({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    }catch (err){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,   \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch (err){\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST,loadPosts);\r\n}\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST,likePosts);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST,unlikePosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadPosts),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}