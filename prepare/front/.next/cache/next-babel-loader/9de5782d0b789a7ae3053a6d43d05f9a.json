{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker, { fake } from 'faker';\nexport const initalState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫번째 게시물 입니다. #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '우아 ㅇ우ㅏ'\n    }]\n  }],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitalState.mainPosts = initalState.mainPosts.concat(generateDummyPost(10));\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const removePost = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '젤초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"젤초\"\n  }\n});\n\nconst reducer = (state = initalState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.cancat(draft.mainPosts);\n        draft.loadPostsDone = true;\n        draft.loadPostsLoading = false;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsError = action.error;\n        draft.loadPostsLoading = true;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostDone = true;\n        draft.addPostLoading = false;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostError = action.error;\n        draft.addPostLoading = true;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostDone = true;\n        draft.removePostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostError = action.error;\n        draft.removePostLoading = false;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentDone = true;\n          draft.addCommentLoading = false;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // post.Comments= [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return{\n          //     ...state,\n          //     mainPosts,\n          //     addCommentDone: true,\n          //     addCommentLoading:false,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentError = action.error;\n        draft.addCommentLoading = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","fake","initalState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","v","i","name","findName","lorem","paragraph","image","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","removePost","addComment","dummyPost","dummyComment","reducer","state","action","draft","cancat","error","unshift","filter","post","find","postId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,SAAS,EAAE,CAAC;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,IAAI,EAAC;AACDD,MAAAA,EAAE,EAAE,CADH;AAEDE,MAAAA,QAAQ,EAAC;AAFR,KAFG;AAMRC,IAAAA,OAAO,EAAE,2BAND;AAORC,IAAAA,MAAM,EAAG,CAAC;AACNJ,MAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADG;AAENC,MAAAA,GAAG,EAAE;AAFC,KAAD,EAGP;AACEN,MAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADL;AAEEC,MAAAA,GAAG,EAAE;AAFP,KAHO,EAMP;AACEN,MAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADL;AAEEC,MAAAA,GAAG,EAAG;AAFR,KANO,CAPD;AAiBRC,IAAAA,QAAQ,EAAG,CAAC;AACRP,MAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADI;AAERJ,MAAAA,IAAI,EAAC;AACDD,QAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADF;AAEDH,QAAAA,QAAQ,EAAE;AAFT,OAFG;AAMRC,MAAAA,OAAO,EAAE;AAND,KAAD,EAOR;AACCH,MAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADJ;AAECJ,MAAAA,IAAI,EAAG;AACHD,QAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EADD;AAEHH,QAAAA,QAAQ,EAAG;AAFR,OAFR;AAMCC,MAAAA,OAAO,EAAG;AANX,KAPQ;AAjBH,GAAD,CADY;AAkCvBK,EAAAA,UAAU,EAAE,EAlCW;AAmCvBC,EAAAA,WAAW,EAAE,IAnCU;AAoCvBC,EAAAA,gBAAgB,EAAE,KApCK;AAqCvBC,EAAAA,aAAa,EAAE,KArCQ;AAsCvBC,EAAAA,cAAc,EAAC,IAtCQ;AAuCvBC,EAAAA,cAAc,EAAE,KAvCO;AAwCvBC,EAAAA,WAAW,EAAE,KAxCU;AAyCvBC,EAAAA,YAAY,EAAC,IAzCU;AA0CvBC,EAAAA,iBAAiB,EAAE,KA1CI;AA2CvBC,EAAAA,cAAc,EAAE,KA3CO;AA4CvBC,EAAAA,eAAe,EAAC,IA5CO;AA6CvBC,EAAAA,iBAAiB,EAAE,KA7CI;AA8CvBC,EAAAA,cAAc,EAAE,KA9CO;AA+CvBC,EAAAA,eAAe,EAAC;AA/CO,CAApB;AAkDP,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAC7BC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,GAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,MAAW;AAChC5B,EAAAA,EAAE,EAAEN,OAAO,CAACW,QAAR,EAD4B;AAEhCJ,EAAAA,IAAI,EAAG;AACHD,IAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADA;AAEHH,IAAAA,QAAQ,EAAEN,KAAK,CAACiC,IAAN,CAAWC,QAAX;AAFP,GAFyB;AAMhC3B,EAAAA,OAAO,EAAEP,KAAK,CAACmC,KAAN,CAAYC,SAAZ,EANuB;AAOhC5B,EAAAA,MAAM,EAAE,CAAC;AACLE,IAAAA,GAAG,EAAEV,KAAK,CAACqC,KAAN,CAAYA,KAAZ;AADA,GAAD,CAPwB;AAUhC1B,EAAAA,QAAQ,EAAE,CAAC;AACPN,IAAAA,IAAI,EAAG;AACHD,MAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADA;AAEHH,MAAAA,QAAQ,EAAEN,KAAK,CAACiC,IAAN,CAAWC,QAAX;AAFP,KADA;AAKP3B,IAAAA,OAAO,EAAEP,KAAK,CAACmC,KAAN,CAAYG,QAAZ;AALF,GAAD;AAVsB,CAAX,CAAzB,CADG;AAqBPpC,WAAW,CAACC,SAAZ,GAAwBD,WAAW,CAACC,SAAZ,CAAsBoC,MAAtB,CAA6Bb,iBAAiB,CAAC,EAAD,CAA9C,CAAxB;AAEA,OAAO,MAAMc,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAC9BC,EAAAA,IAAI,EAAEX,gBADwB;AAE9BU,EAAAA;AAF8B,CAAX,CAAhB;AAIP,OAAO,MAAME,UAAU,GAAGF,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAER,mBAD0B;AAEhCO,EAAAA;AAFgC,CAAX,CAAlB;AAIP,OAAO,MAAMG,UAAU,GAAIH,IAAD,KAAW;AACjCC,EAAAA,IAAI,EAAEL,mBAD2B;AAEjCI,EAAAA;AAFiC,CAAX,CAAnB;;AAMP,MAAMI,SAAS,GAAIJ,IAAD,KAAW;AACzBjD,EAAAA,EAAE,EAAEiD,IAAI,CAACjD,EADgB;AAEzBG,EAAAA,OAAO,EAAE8C,IAAI,CAAC9C,OAFW;AAGzBF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHmB;AAOzBE,EAAAA,MAAM,EAAE,EAPiB;AAQzBG,EAAAA,QAAQ,EAAC;AARgB,CAAX,CAAlB;;AAWA,MAAM+C,YAAY,GAAIL,IAAD,KAAW;AAC5BjD,EAAAA,EAAE,EAACN,OAAO,CAACW,QAAR,EADyB;AAE5BF,EAAAA,OAAO,EAAE8C,IAFmB;AAG5BhD,EAAAA,IAAI,EAAC;AACDD,IAAAA,EAAE,EAAC,CADF;AAEDE,IAAAA,QAAQ,EAAE;AAFT;AAHuB,CAAX,CAArB;;AASA,MAAMqD,OAAO,GAAG,CAACC,KAAK,GAAG1D,WAAT,EAAsB2D,MAAtB,KAAiC;AAC7C,SAAO9D,OAAO,CAAC6D,KAAD,EAASE,KAAD,IAAW;AAC7B,YAAQD,MAAM,CAACP,IAAf;AACI,WAAKd,kBAAL;AACQsB,QAAAA,KAAK,CAAChD,gBAAN,GAAyB,IAAzB;AACAgD,QAAAA,KAAK,CAAC/C,aAAN,GAAsB,KAAtB;AACA+C,QAAAA,KAAK,CAAC9C,cAAN,GAAuB,IAAvB;AACA;;AACR,WAAKyB,kBAAL;AACQqB,QAAAA,KAAK,CAAC3D,SAAN,GAAkB0D,MAAM,CAACR,IAAP,CAAYU,MAAZ,CAAmBD,KAAK,CAAC3D,SAAzB,CAAlB;AACA2D,QAAAA,KAAK,CAAC/C,aAAN,GAAsB,IAAtB;AACA+C,QAAAA,KAAK,CAAChD,gBAAN,GAAyB,KAAzB;AACJ;;AACJ,WAAK4B,kBAAL;AACQoB,QAAAA,KAAK,CAAC9C,cAAN,GAAuB6C,MAAM,CAACG,KAA9B;AACAF,QAAAA,KAAK,CAAChD,gBAAN,GAAyB,IAAzB;AACJ;;AACJ,WAAK6B,gBAAL;AACQmB,QAAAA,KAAK,CAAC7C,cAAN,GAAuB,IAAvB;AACA6C,QAAAA,KAAK,CAAC5C,WAAN,GAAoB,KAApB;AACA4C,QAAAA,KAAK,CAAC3C,YAAN,GAAqB,IAArB;AACA;;AACR,WAAKyB,gBAAL;AACQkB,QAAAA,KAAK,CAAC3D,SAAN,CAAgB8D,OAAhB,CAAwBR,SAAS,CAACI,MAAM,CAACR,IAAR,CAAjC;AACAS,QAAAA,KAAK,CAAC5C,WAAN,GAAoB,IAApB;AACA4C,QAAAA,KAAK,CAAC7C,cAAN,GAAuB,KAAvB;AACJ;;AACJ,WAAK4B,gBAAL;AACQiB,QAAAA,KAAK,CAAC3C,YAAN,GAAqB0C,MAAM,CAACG,KAA5B;AACAF,QAAAA,KAAK,CAAC7C,cAAN,GAAuB,IAAvB;AACJ;;AACJ,WAAK6B,mBAAL;AACQgB,QAAAA,KAAK,CAACvC,iBAAN,GAA0B,IAA1B;AACAuC,QAAAA,KAAK,CAACtC,cAAN,GAAqB,KAArB;AACAsC,QAAAA,KAAK,CAACrC,eAAN,GAAsB,IAAtB;AACJ;;AACJ,WAAKsB,mBAAL;AACQe,QAAAA,KAAK,CAAC3D,SAAN,GAAkB2D,KAAK,CAAC3D,SAAN,CAAgB+D,MAAhB,CAAwBnC,CAAD,IAAOA,CAAC,CAAC3B,EAAF,KAASyD,MAAM,CAACR,IAA9C,CAAlB;AACAS,QAAAA,KAAK,CAACtC,cAAN,GAAuB,IAAvB;AACAsC,QAAAA,KAAK,CAACvC,iBAAN,GAA0B,KAA1B;AACJ;;AACJ,WAAKyB,mBAAL;AACQc,QAAAA,KAAK,CAACrC,eAAN,GAAwBoC,MAAM,CAACG,KAA/B;AACAF,QAAAA,KAAK,CAACvC,iBAAN,GAA0B,KAA1B;AACJ;;AACJ,WAAK0B,mBAAL;AACQa,QAAAA,KAAK,CAAC1C,iBAAN,GAA0B,IAA1B;AACA0C,QAAAA,KAAK,CAACzC,cAAN,GAAuB,KAAvB;AACAyC,QAAAA,KAAK,CAACxC,eAAN,GAAwB,IAAxB;AACJ;;AACJ,WAAK4B,mBAAL;AAAyB;AACrB,gBAAMiB,IAAI,GAAGL,KAAK,CAAC3D,SAAN,CAAgBiE,IAAhB,CAAsBrC,CAAD,IAAMA,CAAC,CAAC3B,EAAF,KAASyD,MAAM,CAACQ,MAA3C,CAAb;AACAF,UAAAA,IAAI,CAACxD,QAAL,CAAcsD,OAAd,CAAsBP,YAAY,CAACG,MAAM,CAACR,IAAP,CAAY9C,OAAb,CAAlC;AACAuD,UAAAA,KAAK,CAACzC,cAAN,GAAuB,IAAvB;AACAyC,UAAAA,KAAK,CAAC1C,iBAAN,GAA0B,KAA1B;AACA,gBALqB,CAMrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACD,WAAK+B,mBAAL;AACQW,QAAAA,KAAK,CAACxC,eAAN,GAAwBuC,MAAM,CAACG,KAA/B;AACAF,QAAAA,KAAK,CAAC1C,iBAAN,GAA0B,KAA1B;AACJ;;AACJ;AACI;AAvER;AAyEH,GA1Ea,CAAd;AA6EH,CA9ED;;AAgFA,eAAeuC,OAAf","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker, { fake } from 'faker';\r\n\r\nexport const initalState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User:{\r\n            id: 1,\r\n            nickname:'제로초',\r\n        },\r\n        content: '첫번째 게시물 입니다. #해시태그 #익스프레스',\r\n        Images : [{\r\n            id:shortId.generate(),\r\n            src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        },{\r\n            id:shortId.generate(),\r\n            src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        },{\r\n            id:shortId.generate(),\r\n            src : 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        }],\r\n        Comments : [{\r\n            id: shortId.generate(),\r\n            User:{\r\n                id:shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 개정판이 나왔군요',\r\n        }, {\r\n            id:shortId.generate(),\r\n            User : {\r\n                id: shortId.generate(),\r\n                nickname : 'hero',\r\n            },\r\n            content : '우아 ㅇ우ㅏ',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    hasMorePost: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError:null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError:null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError:null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError:null,\r\n}\r\n\r\nexport const generateDummyPost = (number) => \r\n    Array(number).fill().map((v, i) => ({\r\n        id: shortId.generate(),\r\n        User : {\r\n            id:shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        Images: [{\r\n            src: faker.image.image(),\r\n        }],\r\n        Comments: [{\r\n            User : {\r\n                id:shortId.generate(),\r\n                nickname: faker.name.findName()\r\n            },\r\n            content: faker.lorem.sentence(),\r\n        }],\r\n    }));\r\n\r\n\r\ninitalState.mainPosts = initalState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\nexport const removePost= (data) => ({\r\n    type: REMOVE_POST_REQUEST,\r\n    data\r\n})\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '젤초',\r\n    },\r\n    Images: [],\r\n    Comments:[],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id:shortId.generate(),\r\n    content: data,\r\n    User:{\r\n        id:1,\r\n        nickname: \"젤초\"\r\n    }\r\n});\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOAD_POSTS_REQUEST:\r\n                    draft.loadPostsLoading = true;\r\n                    draft.loadPostsDone = false;\r\n                    draft.loadPostsError = null;\r\n                    break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                    draft.mainPosts = action.data.cancat(draft.mainPosts);\r\n                    draft.loadPostsDone = true;\r\n                    draft.loadPostsLoading = false;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                    draft.loadPostsError = action.error;\r\n                    draft.loadPostsLoading = true;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                    draft.addPostLoading = true;\r\n                    draft.addPostDone = false;\r\n                    draft.addPostError = null;\r\n                    break;\r\n            case ADD_POST_SUCCESS:\r\n                    draft.mainPosts.unshift(dummyPost(action.data));\r\n                    draft.addPostDone = true;\r\n                    draft.addPostLoading = false;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                    draft.addPostError = action.error;\r\n                    draft.addPostLoading = true;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                    draft.removePostLoading = true;\r\n                    draft.removePostDone=false;\r\n                    draft.removePostError=null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                    draft.removePostDone = true;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                    draft.removePostError = action.error;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                    draft.addCommentLoading = true;\r\n                    draft.addCommentDone = false;\r\n                    draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((v)=> v.id === action.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentDone = true;\r\n                draft.addCommentLoading = false;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // post.Comments= [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return{\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentDone: true,\r\n                //     addCommentLoading:false,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                    draft.addCommentError = action.error;\r\n                    draft.addCommentLoading = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}