{"ast":null,"code":"import produce from 'immer';\nexport const initalState = {\n  mainPosts: [],\n  singlePost: null,\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initalState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesDone = true;\n          draft.uploadImagesLoading = false;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesError = action.error;\n        draft.uploadImagesLoading = false;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostDone = true;\n          draft.likePostLoading = false;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostError = action.error;\n        draft.likePostLoading = false;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.PostId);\n          draft.unlikePostDone = true;\n          draft.unlikePostLoading = false;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostError = action.error;\n        draft.unlikePostLoading = false;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.loadPostsDone = true;\n        draft.loadPostsLoading = false;\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsError = action.error;\n        draft.loadPostsLoading = false;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.singlePost = action.data;\n        draft.loadPostDone = true;\n        draft.loadPostLoading = false;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostError = action.error;\n        draft.loadPostLoading = false;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        draft.addPostDone = true;\n        draft.addPostLoading = false;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostError = action.error;\n        draft.addPostLoading = true;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.postId);\n        draft.removePostDone = true;\n        draft.removePostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostError = action.error;\n        draft.removePostLoading = false;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.retweetDone = true;\n        draft.retweetLoading = false;\n        break;\n\n      case RETWEET_FAILURE:\n        draft.retweetError = action.error;\n        draft.retweetLoading = true;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.postId);\n          post.Comments.unshift(action.data.content);\n          draft.addCommentDone = true;\n          draft.addCommentLoading = false;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // post.Comments= [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return{\n          //     ...state,\n          //     mainPosts,\n          //     addCommentDone: true,\n          //     addCommentLoading:false,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentError = action.error;\n        draft.addCommentLoading = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/reducers/post.js"],"names":["produce","initalState","mainPosts","singlePost","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","concat","length","unshift","postId","Comments","content"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\n\r\nexport const initalState = {\r\n    mainPosts: [],\r\n    singlePost:null,\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError:null,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError:null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError:null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError:null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError:null,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError:null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError:null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError:null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError:null,\r\n}\r\n\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n})\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\n\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case UPLOAD_IMAGES_REQUEST:\r\n                    draft.uploadImagesLoading = true;\r\n                    draft.uploadImagesDone = false;\r\n                    draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                    draft.imagePaths = action.data;\r\n                    draft.uploadImagesDone = true;\r\n                    draft.uploadImagesLoading = false;\r\n                break;}\r\n            case UPLOAD_IMAGES_FAILURE:\r\n                    draft.uploadImagesError = action.error;\r\n                    draft.uploadImagesLoading = false;\r\n                break;\r\n            case REMOVE_IMAGE :\r\n                    draft.imagePaths = draft.imagePaths.filter(( v, i )=> i !== action.data);\r\n                break;\r\n            case LIKE_POST_REQUEST:\r\n                    draft.likePostLoading = true;\r\n                    draft.likePostDone = false;\r\n                    draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS: {\r\n                    const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                    post.Likers.push({ id: action.data.UserId });\r\n                    draft.likePostDone = true;\r\n                    draft.likePostLoading = false;\r\n                break;}\r\n            case LIKE_POST_FAILURE:\r\n                    draft.likePostError = action.error;\r\n                    draft.likePostLoading = false;\r\n                break;\r\n            case UNLIKE_POST_REQUEST:\r\n                    draft.unlikePostLoading = true;\r\n                    draft.unlikePostDone = false;\r\n                    draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS: {\r\n                    const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                    post.Likers = post.Likers.filter((v) => v.id !== action.data.PostId);\r\n                    draft.unlikePostDone = true;\r\n                    draft.unlikePostLoading = false;\r\n                break; }\r\n            case UNLIKE_POST_FAILURE:\r\n                    draft.unlikePostError = action.error;\r\n                    draft.unlikePostLoading = false;\r\n                break;\r\n            case LOAD_POSTS_REQUEST:\r\n                    draft.loadPostsLoading = true;\r\n                    draft.loadPostsDone = false;\r\n                    draft.loadPostsError = null;\r\n                    break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                    draft.mainPosts = draft.mainPosts.concat(action.data);\r\n                    draft.loadPostsDone = true;\r\n                    draft.loadPostsLoading = false;\r\n                    draft.hasMorePosts = action.data.length === 10;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                    draft.loadPostsError = action.error;\r\n                    draft.loadPostsLoading = false;\r\n                break;\r\n            case LOAD_POST_REQUEST:\r\n                    draft.loadPostLoading = true;\r\n                    draft.loadPostDone = false;\r\n                    draft.loadPostError = null;\r\n                    break;\r\n            case LOAD_POST_SUCCESS:\r\n                    draft.singlePost = action.data;\r\n                    draft.loadPostDone = true;\r\n                    draft.loadPostLoading = false;\r\n                break;\r\n            case LOAD_POST_FAILURE:\r\n                    draft.loadPostError = action.error;\r\n                    draft.loadPostLoading = false;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                    draft.addPostLoading = true;\r\n                    draft.addPostDone = false;\r\n                    draft.addPostError = null;\r\n                    break;\r\n            case ADD_POST_SUCCESS:\r\n                    draft.mainPosts.unshift(action.data);\r\n                    draft.imagePaths = [];\r\n                    draft.addPostDone = true;\r\n                    draft.addPostLoading = false;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                    draft.addPostError = action.error;\r\n                    draft.addPostLoading = true;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                    draft.removePostLoading = true;\r\n                    draft.removePostDone=false;\r\n                    draft.removePostError=null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.postId);\r\n                    draft.removePostDone = true;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                    draft.removePostError = action.error;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case RETWEET_REQUEST:\r\n                    draft.retweetLoading = true;\r\n                    draft.retweetDone = false;\r\n                    draft.retweetError = null;\r\n                break;\r\n            case RETWEET_SUCCESS:\r\n                    draft.mainPosts.unshift(action.data);\r\n                    draft.retweetDone = true;\r\n                    draft.retweetLoading = false;\r\n                break;\r\n            case RETWEET_FAILURE:\r\n                    draft.retweetError = action.error;\r\n                    draft.retweetLoading = true;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                    draft.addCommentLoading = true;\r\n                    draft.addCommentDone = false;\r\n                    draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((v)=> v.id === action.postId);\r\n                post.Comments.unshift(action.data.content);\r\n                draft.addCommentDone = true;\r\n                draft.addCommentLoading = false;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // post.Comments= [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return{\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentDone: true,\r\n                //     addCommentLoading:false,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                    draft.addCommentError = action.error;\r\n                    draft.addCommentLoading = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}