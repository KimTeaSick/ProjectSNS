{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initalState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫번째 게시물 입니다. #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }, {\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }, {\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '우아 ㅇ우ㅏ'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = {\n  id: 2,\n  content: '덤데이터 입니다',\n  User: {\n    id: 1,\n    nickname: '젤초'\n  },\n  images: [],\n  Comments: []\n};\n\nconst reducer = (state = initalState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        addPostDone: true,\n        addPostLoading: false\n      });\n\n    case ADD_POST_FAILURE:\n      return {\n        addPostError: action.error,\n        addPostLoading: false\n      };\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainComments],\n        addCommentDone: true,\n        addCommentLoading: false\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return {\n        addCommentError: action.error,\n        addCommentLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/reducers/post.js"],"names":["initalState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","images","reducer","state","action","error","addCommentLoading","addCommentDone","addCommentError","mainComments"],"mappings":"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","sourcesContent":["\r\n\r\nexport const initalState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User:{\r\n            id: 1,\r\n            nickname:'제로초',\r\n        },\r\n        content: '첫번째 게시물 입니다. #해시태그 #익스프레스',\r\n        Images : [{\r\n            src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        },{\r\n            src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        },{\r\n            src : 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        }],\r\n        Comments : [{\r\n            User:{\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 개정판이 나왔군요',\r\n        }, {\r\n            User : {\r\n                nickname : 'hero',\r\n            },\r\n            content : '우아 ㅇ우ㅏ',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError:null,\r\n}\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\nconst dummyPost = {\r\n    id:2,\r\n    content: '덤데이터 입니다',\r\n    User: {\r\n        id: 1,\r\n        nickname: '젤초',\r\n    },\r\n    images: [],\r\n    Comments:[],\r\n};\r\n\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return{\r\n                ...state,\r\n                addPostLoading:true,\r\n                addPostDone:false,\r\n                addPostError:null,\r\n            }\r\n        case ADD_POST_SUCCESS:\r\n            return{\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                addPostDone: true,\r\n                addPostLoading:false,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return{\r\n                addPostError:action.error,\r\n                addPostLoading:false,\r\n            }\r\n        case ADD_COMMENT_REQUEST:\r\n            return{\r\n                ...state,\r\n                addCommentLoading:true,\r\n                addCommentDone:false,\r\n                addCommentError:null,\r\n            }\r\n        case ADD_COMMENT_SUCCESS:\r\n            return{\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainComments],\r\n                addCommentDone: true,\r\n                addCommentLoading:false,\r\n            };\r\n        case ADD_COMMENT_FAILURE:\r\n            return{\r\n                addCommentError:action.error,\r\n                addCommentLoading:false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}