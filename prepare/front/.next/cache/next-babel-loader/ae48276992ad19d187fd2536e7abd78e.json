{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker, { fake } from 'faker';\nexport const initalState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫번째 게시물 입니다. #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '우아 ㅇ우ㅏ'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\ninitalState.mainPosts = initalState.mainPosts.concat(Array(20).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '젤초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"젤초\"\n  }\n});\n\nconst reducer = (state = initalState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostDone = true;\n        draft.addPostLoading = false;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostError = action.error;\n        draft.addPostLoading = true;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostDone = true;\n        draft.removePostLoading = false;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostError = action.error;\n        draft.removePostLoading = false;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentDone = true;\n          draft.addCommentLoading = false;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // post.Comments= [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return{\n          //     ...state,\n          //     mainPosts,\n          //     addCommentDone: true,\n          //     addCommentLoading:false,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentError = action.error;\n        draft.addCommentLoading = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Kim/OneDrive/바탕 화면/React/nodeBird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","fake","initalState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","concat","Array","fill","map","v","i","name","findName","lorem","paragraph","image","imageUrl","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker, { fake } from 'faker';\r\n\r\nexport const initalState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User:{\r\n            id: 1,\r\n            nickname:'제로초',\r\n        },\r\n        content: '첫번째 게시물 입니다. #해시태그 #익스프레스',\r\n        Images : [{\r\n            id:shortId.generate(),\r\n            src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        },{\r\n            id:shortId.generate(),\r\n            src: 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        },{\r\n            id:shortId.generate(),\r\n            src : 'https://cdn.mkhealth.co.kr/news/photo/202010/50970_51164_4758.jpg'\r\n        }],\r\n        Comments : [{\r\n            id: shortId.generate(),\r\n            User:{\r\n                id:shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: '우와 개정판이 나왔군요',\r\n        }, {\r\n            id:shortId.generate(),\r\n            User : {\r\n                id: shortId.generate(),\r\n                nickname : 'hero',\r\n            },\r\n            content : '우아 ㅇ우ㅏ',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError:null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError:null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError:null,\r\n}\r\n\r\ninitalState.mainPosts = initalState.mainPosts.concat(\r\nArray(20).fill().map((v, i) => ({\r\n    id: shortId.generate(),\r\n    User : {\r\n        id:shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.imageUrl(),\r\n    }],\r\n    Comments: [{\r\n        User : {\r\n            id:shortId.generate(),\r\n            nickname: faker.name.findName()\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n})),\r\n);\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '젤초',\r\n    },\r\n    Images: [],\r\n    Comments:[],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id:shortId.generate(),\r\n    content: data,\r\n    User:{\r\n        id:1,\r\n        nickname: \"젤초\"\r\n    }\r\n});\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                    draft.mainPosts.unshift(dummyPost(action.data));\r\n                    draft.addPostDone = true;\r\n                    draft.addPostLoading = false;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                    draft.addPostError = action.error;\r\n                    draft.addPostLoading = true;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                    draft.removePostLoading = true;\r\n                    draft.removePostDone=false;\r\n                    draft.removePostError=null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                    draft.removePostDone = true;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                    draft.removePostError = action.error;\r\n                    draft.removePostLoading = false;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                    draft.addCommentLoading = true;\r\n                    draft.addCommentDone = false;\r\n                    draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((v)=> v.id === action.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentDone = true;\r\n                draft.addCommentLoading = false;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // post.Comments= [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return{\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentDone: true,\r\n                //     addCommentLoading:false,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                    draft.addCommentError = action.error;\r\n                    draft.addCommentLoading = false;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}